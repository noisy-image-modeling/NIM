# manually trigger integration with the latest pytorch
name: integration

on:
  repository_dispatch:
    type: [integration-test-command]

jobs:
  integration-py3:
    container:
      image: nvcr.io/nvidia/pytorch:22.04-py3  # CUDA 11.6 py38
      options: --gpus all  # shm-size 4g works fine
    runs-on: [self-hosted, linux, x64, integration]
    steps:
    # checkout the pull request branch
    - uses: actions/checkout@v3
      with:
        token: ${{ secrets.PR_MAINTAIN }}
        repository: ${{ github.event.client_payload.pull_request.head.repo.full_name }}
        ref: ${{ github.event.client_payload.pull_request.head.ref }}
    - name: cache weekly timestamp
      id: pip-cache
      run: |
        echo "datew=$(date '+%Y-%V')" >> $GITHUB_OUTPUT
    - name: cache for pip
      uses: actions/cache@v3
      id: cache
      with:
        path: |
          ~/.cache/pip
          ~/.cache/torch
        key: docker-py3-pip-${{ steps.pip-cache.outputs.datew }}
    - name: Install the dependencies
      run: |
        which python
        python -m pip install --upgrade pip wheel
        python -m pip install --upgrade torch torchvision
        python -m pip install -r requirements-dev.txt
        rm -rf /github/home/.cache/torch/hub/mmars/
    - name: Run integration tests
      run: |
        python -m pip list
        git config --global --add safe.directory /__w/MONAI/MONAI
        git clean -ffdx
        nvidia-smi
        export CUDA_VISIBLE_DEVICES=$(python -m tests.utils | tail -n 1)
        echo $CUDA_VISIBLE_DEVICES
        trap 'if pgrep python; then pkill python; fi;' ERR
        python -c $'import torch\na,b=torch.zeros(1,device="cuda:0"),torch.zeros(1,device="cuda:1");\nwhile True:print(a,b)' > /dev/null &
        python -c "import torch; print(torch.__version__); print('{} of GPUs available'.format(torch.cuda.device_count()))"
        python -c 'import torch; print(torch.rand(5,3, device=torch.device("cuda:0")))'
        BUILD_MONAI=1 ./runtests.sh --build --net
        BUILD_MONAI=1 ./runtests.sh --build --unittests --disttests
        if pgrep python; then pkill python; fi
      shell: bash
    - name: Add reaction
      uses: peter-evans/create-or-update-comment@v2
      if: github.event.pull_request.number != ''
      with:
        token: ${{ secrets.PR_MAINTAIN }}
        repository: ${{ github.event.client_payload.github.payload.repository.full_name }}
        comment-id: ${{ github.event.client_payload.github.payload.comment.id }}
        reaction-type: rocket
